@page "/add-firewall-exception"
@using System.ComponentModel.DataAnnotations

<EditForm Model="@firewallException" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="sourceAddress">Source Address (CIDR):</label>
        <InputText id="sourceAddress" @bind-Value="firewallException.SourceAddress" />
        <ValidationMessage For="@(() => firewallException.SourceAddress)" />
    </div>

    <div>
        <label for="protocol">Protocol:</label>
        <InputSelect id="protocol" @bind-Value="firewallException.Protocol">
            <option value="http">HTTP</option>
            <option value="https">HTTPS</option>
        </InputSelect>
        <ValidationMessage For="@(() => firewallException.Protocol)" />
    </div>

    <div>
        <label for="fqdns">FQDNs (comma-separated):</label>
        <InputText id="fqdns" @bind-Value="firewallException.Fqdns" />
        <ValidationMessage For="@(() => firewallException.Fqdns)" />
    </div>

    <button type="submit">Submit</button>
</EditForm>

@code {
    private FirewallExceptionModel firewallException = new FirewallExceptionModel();

    private void HandleValidSubmit()
    {
        // Handle the form submission logic here
        Console.WriteLine("Form submitted successfully!");
    }

    public class FirewallExceptionModel
    {
        [Required]
        [RegularExpression(@"^([0-9]{1,3}\.){3}[0-9]{1,3}(\/[0-9]{1,2})?$", ErrorMessage = "Invalid CIDR format.")]
        public string SourceAddress { get; set; }

        [Required]
        public string Protocol { get; set; }

        [Required]
        [CustomValidation(typeof(FqdnValidator), nameof(FqdnValidator.ValidateFqdns))]
        public string Fqdns { get; set; }
    }

    public static class FqdnValidator
    {
        public static ValidationResult ValidateFqdns(string fqdns, ValidationContext context)
        {
            var fqdnList = fqdns.Split(',');
            foreach (var fqdn in fqdnList)
            {
                if (!Uri.CheckHostName(fqdn.Trim()).Equals(UriHostNameType.Dns))
                {
                    return new ValidationResult("Invalid FQDN format.");
                }
            }
            return ValidationResult.Success;
        }
    }
}